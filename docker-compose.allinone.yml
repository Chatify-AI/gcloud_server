# ==========================================
# GCloud Server v3.6.1 - 完整一键部署
# ==========================================
# 使用方法：
# wget https://raw.githubusercontent.com/Chatify-AI/gcloud_server/v3.6.1/docker-compose.allinone.yml
# docker-compose -f docker-compose.allinone.yml up -d
#
# 生产环境请创建 .env 文件设置安全密码
# ==========================================

version: '3.8'

services:
  # MySQL 数据库
  mysql-service:
    image: mysql:8.0
    container_name: gcloud-mysql
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD:-root123}
      MYSQL_DATABASE: gcloud  
      MYSQL_USER: gcloud
      MYSQL_PASSWORD: ${DB_PASSWORD:-gcloud123}
    ports:
      - "5306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
    networks:
      - gcloud-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      timeout: 20s
      retries: 10
      interval: 5s
    command: --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci

  # 数据库初始化
  db-init:
    image: mysql:8.0
    container_name: gcloud-db-init
    depends_on:
      mysql-service:
        condition: service_healthy
    networks:
      - gcloud-network
    command: >
      bash -c "
      mysql -h mysql-service -uroot -p${MYSQL_ROOT_PASSWORD:-root123} gcloud <<'SQLEOF'
      CREATE TABLE IF NOT EXISTS g_cloud_accounts (
        id INT AUTO_INCREMENT PRIMARY KEY,
        email VARCHAR(255) NOT NULL UNIQUE,
        display_name VARCHAR(255),
        project_id VARCHAR(255),
        project_name VARCHAR(255),
        access_token TEXT,
        refresh_token TEXT,
        token_expiry DATETIME,
        scopes TEXT,
        is_active TINYINT(1) DEFAULT 1,
        config_dir VARCHAR(500),
        config_name VARCHAR(100),
        need_monitor TINYINT(1) DEFAULT 0,
        script_execution_count INT DEFAULT 0,
        last_monitor_time DATETIME,
        last_used DATETIME,
        created_at DATETIME NOT NULL,
        updated_at DATETIME NOT NULL,
        INDEX idx_email (email),
        INDEX idx_is_active (is_active),
        INDEX idx_need_monitor (need_monitor)
      ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;
      SQLEOF
      "

  # Redis 缓存
  redis-service:
    image: redis:7-alpine
    container_name: gcloud-redis
    restart: unless-stopped
    ports:
      - "5379:6379"
    volumes:
      - redis_data:/data
    networks:
      - gcloud-network
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis123}
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD:-redis123}", "ping"]
      timeout: 3s
      retries: 5
      interval: 5s

  # 主应用服务
  main-service:
    image: luzhipeng728/gcloud-main-service:v3.6.0
    container_name: gcloud-main
    restart: unless-stopped
    depends_on:
      mysql-service:
        condition: service_healthy
      redis-service:
        condition: service_healthy
      db-init:
        condition: service_completed_successfully
    environment:
      NODE_ENV: production
      PORT: 3000
      HOST: 0.0.0.0
      DB_HOST: mysql-service
      DB_PORT: 3306
      DB_NAME: gcloud
      DB_USER: gcloud
      DB_PASSWORD: ${DB_PASSWORD:-gcloud123}
      REDIS_HOST: redis-service
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-redis123}
      JWT_SECRET: ${JWT_SECRET:-PLEASE-CHANGE-THIS-SECRET-IN-PRODUCTION-MINIMUM-64-CHARS}
      SESSION_SECRET: ${SESSION_SECRET:-PLEASE-CHANGE-THIS-SESSION-SECRET-IN-PRODUCTION-64CH}
      ONEAPI_BASE_URL: ${ONEAPI_BASE_URL:-http://104.194.9.201:11002}
      ONEAPI_KEY: ${ONEAPI_KEY:-t0bAXxyETOitEfEWuU37sWSqwJrE}
      GCLOUD_SCRIPT_URL: ${GCLOUD_SCRIPT_URL:-https://raw.githubusercontent.com/Chatify-AI/gcloud_server/main/scripts/gcp-put.sh}
      FTP_HOST: ftp-service
      EXECUTOR_SERVICE_URL: http://executor-service:3001
      CHANNEL_MONITOR_PATH: /home/ftpusers/chatify/vip
    ports:
      - "5000:3000"
      - "5080:3000"
    volumes:
      - gcloud_config:/home/node/.config/gcloud-manager
      - app_logs:/app/logs
      - ftp_data:/home/ftpusers/chatify
    networks:
      - gcloud-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      timeout: 10s
      retries: 5
      interval: 15s
      start_period: 40s

  # 统计服务
  stats-service:
    image: luzhipeng728/gcloud-stats-service:v3.6.0
    container_name: gcloud-stats
    restart: unless-stopped
    depends_on:
      main-service:
        condition: service_healthy
    environment:
      NODE_ENV: production
      PORT: 4000
      DB_HOST: mysql-service
      DB_NAME: gcloud
      DB_USER: gcloud
      DB_PASSWORD: ${DB_PASSWORD:-gcloud123}
    ports:
      - "5001:4000"
    networks:
      - gcloud-network

  # 执行器服务
  executor-service:
    image: luzhipeng728/gcloud-executor-service:v3.6.0
    container_name: gcloud-executor
    restart: unless-stopped
    depends_on:
      mysql-service:
        condition: service_healthy
      redis-service:
        condition: service_healthy
    environment:
      NODE_ENV: production
      PORT: 3001
      DB_HOST: mysql-service
      DB_NAME: gcloud
      DB_USER: gcloud
      DB_PASSWORD: ${DB_PASSWORD:-gcloud123}
      REDIS_HOST: redis-service
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-redis123}
      CLOUDSDK_CONFIG: /home/node/.config/gcloud-manager
    ports:
      - "5002:3001"
    volumes:
      - gcloud_config:/home/node/.config/gcloud-manager
    networks:
      - gcloud-network
    cap_add:
      - SYS_ADMIN

  # FTP 服务
  ftp-service:
    image: luzhipeng728/gcloud-ftp-service:v3.6.0
    container_name: gcloud-ftp
    restart: unless-stopped
    environment:
      PUBLICHOST: ${FTP_PUBLIC_HOST:-your-server-ip}
      FTP_USER_NAME: chatify
      FTP_USER_PASS: chatify123
    ports:
      - "5021:21"
      - "50000-50009:30000-30009"
    volumes:
      - ftp_data:/home/ftpusers/chatify
    networks:
      - gcloud-network

networks:
  gcloud-network:
    driver: bridge

volumes:
  mysql_data:
  redis_data:
  gcloud_config:
  app_logs:
  ftp_data:
