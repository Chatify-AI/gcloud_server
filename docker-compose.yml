version: '3.8'

services:
  # ========================================
  # MySQL 数据库服务
  # ========================================
  mysql-service:
    image: mysql:8.0
    container_name: gcloud-mysql
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: root_password_change_me
      MYSQL_DATABASE: gcloud
      MYSQL_USER: gcloud
      MYSQL_PASSWORD: gcloud123
      # MySQL 优化
      MYSQL_INITDB_SKIP_TZINFO: "1"
    ports:
      - "3306:3306"
    volumes:
      # 数据库数据持久化
      - mysql_data:/var/lib/mysql
      # 初始化脚本
      - ./docker/mysql/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - gcloud-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      timeout: 20s
      retries: 10
      interval: 10s
    # 资源限制
    deploy:
      resources:
        limits:
          cpus: "1.0"
          memory: 1G
        reservations:
          cpus: "0.5"
          memory: 512M
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # ========================================
  # Redis 缓存服务 (可选)
  # ========================================
  redis-service:
    image: redis:7-alpine
    container_name: gcloud-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - gcloud-network
    command: redis-server --appendonly yes --requirepass redis_password_change_me
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      timeout: 3s
      retries: 5
      interval: 5s
    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: 256M
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "2"

  # ========================================
  # 主应用服务 (Web UI, API Gateway)
  # ========================================
  main-service:
    build:
      context: .
      dockerfile: docker/main/Dockerfile
      target: production
    container_name: gcloud-main-service
    restart: unless-stopped
    depends_on:
      mysql-service:
        condition: service_healthy
      redis-service:
        condition: service_healthy
    environment:
      # 基础配置
      NODE_ENV: production
      PORT: 3000
      HOST: 0.0.0.0

      # 数据库配置
      DB_HOST: mysql-service
      DB_PORT: 3306
      DB_NAME: gcloud
      DB_USER: gcloud
      DB_PASSWORD: gcloud123

      # Redis 配置
      REDIS_HOST: redis-service
      REDIS_PORT: 6379
      REDIS_PASSWORD: redis_password_change_me

      # 认证配置
      JWT_SECRET: ${JWT_SECRET:-your-super-secret-jwt-key-change-this-in-production}
      JWT_EXPIRES_IN: 7d
      SESSION_SECRET: ${SESSION_SECRET:-your-session-secret-change-this-in-production}

      # Google OAuth (可选)
      GOOGLE_CLIENT_ID: ${GOOGLE_CLIENT_ID:-}
      GOOGLE_CLIENT_SECRET: ${GOOGLE_CLIENT_SECRET:-}
      GOOGLE_REDIRECT_URI: http://localhost:3000/api/auth/google/callback

      # 前端配置
      FRONTEND_URL: http://localhost:3000

      # GCloud 配置
      GCLOUD_PROJECT: ${GCLOUD_PROJECT:-}
      GCLOUD_CONFIG_DIR: /root/.config/gcloud-manager

      # 日志配置
      LOG_LEVEL: info
      LOG_DIR: /app/logs
    ports:
      - "3000:3000"
    volumes:
      # GCloud 配置和凭证 (持久化)
      - gcloud_config:/root/.config/gcloud-manager
      # 应用日志 (持久化)
      - app_logs:/app/logs
      # 前端构建产物
      - frontend_build:/app/frontend/dist:ro
    networks:
      - gcloud-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      timeout: 10s
      retries: 5
      interval: 15s
      start_period: 30s
    deploy:
      resources:
        limits:
          cpus: "1.0"
          memory: 512M
        reservations:
          cpus: "0.5"
          memory: 256M
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "5"
    # 仅在本地开发时使用 stdin
    stdin_open: false
    tty: false

  # ========================================
  # 渠道统计服务
  # ========================================
  stats-service:
    build:
      context: ./channel-stats-service
      dockerfile: ../docker/stats/Dockerfile
      target: production
    container_name: gcloud-stats-service
    restart: unless-stopped
    depends_on:
      mysql-service:
        condition: service_healthy
      main-service:
        condition: service_healthy
    environment:
      NODE_ENV: production
      PORT: 4000
      HOST: 0.0.0.0

      # 数据库配置
      DB_HOST: mysql-service
      DB_PORT: 3306
      DB_NAME: gcloud
      DB_USER: gcloud
      DB_PASSWORD: gcloud123

      # 主服务配置
      MAIN_SERVICE_URL: http://main-service:3000

      # 日志配置
      LOG_LEVEL: info
      LOG_DIR: /app/logs
    ports:
      - "4000:4000"
    volumes:
      # 日志持久化
      - stats_logs:/app/logs
    networks:
      - gcloud-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4000/health"]
      timeout: 10s
      retries: 5
      interval: 15s
      start_period: 20s
    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: 256M
        reservations:
          cpus: "0.25"
          memory: 128M
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # ========================================
  # GCloud 执行器服务
  # ========================================
  executor-service:
    build:
      context: ./gcloud-executor-service
      dockerfile: ../docker/executor/Dockerfile
      target: production
    container_name: gcloud-executor-service
    restart: unless-stopped
    depends_on:
      mysql-service:
        condition: service_healthy
      redis-service:
        condition: service_healthy
    environment:
      NODE_ENV: production
      PORT: 3001
      HOST: 0.0.0.0

      # 数据库配置
      DB_HOST: mysql-service
      DB_PORT: 3306
      DB_NAME: gcloud
      DB_USER: gcloud
      DB_PASSWORD: gcloud123

      # Redis 配置
      REDIS_HOST: redis-service
      REDIS_PORT: 6379
      REDIS_PASSWORD: redis_password_change_me

      # GCloud 配置
      CLOUDSDK_CONFIG: /root/.config/gcloud-manager
      GCLOUD_PROJECT: ${GCLOUD_PROJECT:-}

      # 日志配置
      LOG_LEVEL: info
      LOG_DIR: /app/logs
    ports:
      - "3001:3001"
    volumes:
      # GCloud 配置和凭证 (共享)
      - gcloud_config:/root/.config/gcloud-manager
      # 日志持久化
      - executor_logs:/app/logs
    networks:
      - gcloud-network
    # 需要特殊权限执行 GCloud 命令
    # 可根据需要调整
    cap_add:
      - SYS_ADMIN
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      timeout: 10s
      retries: 5
      interval: 15s
      start_period: 20s
    deploy:
      resources:
        limits:
          cpus: "1.0"
          memory: 512M
        reservations:
          cpus: "0.5"
          memory: 256M
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # ========================================
  # FTP 服务 (可选)
  # ========================================
  ftp-service:
    image: ${FTP_IMAGE:-vsftpd:latest}
    container_name: gcloud-ftp-service
    restart: unless-stopped
    environment:
      FTP_USER: ftpuser
      FTP_PASS: ${FTP_PASSWORD:-ftppass123}
      PASV_ADDRESS: ${FTP_PASV_ADDRESS:-localhost}
      PASV_MIN_PORT: 30000
      PASV_MAX_PORT: 30100
    ports:
      # FTP 主端口
      - "21:21"
      # 被动模式端口范围
      - "30000-30100:30000-30100"
    volumes:
      # FTP 用户目录 (持久化)
      - ftp_data:/home/ftpuser
      # FTP 配置 (可选)
      - ./docker/ftp/vsftpd.conf:/etc/vsftpd.conf:ro
    networks:
      - gcloud-network
    deploy:
      resources:
        limits:
          cpus: "0.25"
          memory: 128M
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "2"
    # 仅在需要时启用 (可注释禁用)
    # profiles: ["ftp"]

  # ========================================
  # Nginx 反向代理 (可选,生产推荐)
  # ========================================
  nginx-proxy:
    image: nginx:1.25-alpine
    container_name: gcloud-nginx
    restart: unless-stopped
    depends_on:
      - main-service
      - stats-service
    ports:
      - "80:80"
      - "443:443"
    volumes:
      # Nginx 配置
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/nginx/conf.d:/etc/nginx/conf.d:ro
      # SSL 证书 (需要自行配置)
      - ./docker/nginx/ssl:/etc/nginx/ssl:ro
    networks:
      - gcloud-network
    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: 256M
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "2"
    # 仅在生产环境启用
    # profiles: ["production"]

# ========================================
# 网络定义
# ========================================
networks:
  gcloud-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# ========================================
# 数据卷定义
# ========================================
volumes:
  # MySQL 数据库数据
  mysql_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${VOLUME_PATH:-./data}/mysql

  # Redis 数据
  redis_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${VOLUME_PATH:-./data}/redis

  # GCloud 配置 (共享)
  gcloud_config:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${VOLUME_PATH:-./data}/gcloud-config

  # 应用日志
  app_logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${VOLUME_PATH:-./data}/logs/app

  stats_logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${VOLUME_PATH:-./data}/logs/stats

  executor_logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${VOLUME_PATH:-./data}/logs/executor

  # 前端构建产物
  frontend_build:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${VOLUME_PATH:-./data}/frontend-build

  # FTP 数据
  ftp_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${VOLUME_PATH:-./data}/ftp
